---
import '../styles/global.css';
import { getCollection } from 'astro:content';
import { DiceOne, DiceTwo, DiceThree, DiceFour, DiceFive, DiceSix } from 'phosphor-icons';

interface Props {
  title: string;
  description?: string;
}

const SITE_DESCRIPTION = 'A personal blog exploring the intersection of design, technology, and human creativity. Through thoughtful analysis and personal experiences, it examines how modern tools and AI are reshaping our approach to design, coding, and creative work, while maintaining a focus on the human elements of judgment, intuition, and meaningful decision-making.';

const { title, description = SITE_DESCRIPTION } = Astro.props;

// Get all categories from posts
const posts = (await getCollection('blog')).filter(post => !post.data.unlisted);
const categories = new Set(posts.flatMap(post => post.data.tags || []));

// Format category names for display and count posts
const formattedCategories = Array.from(categories).map(category => ({
  slug: category,
  name: category
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' '),
  count: posts.filter(post => (post.data.tags || []).includes(category)).length
}));

// Format posts for search
const searchablePosts = posts.map(post => ({
  title: post.data.title,
  slug: post.slug,
  category: post.data.tags?.[0] || 'uncategorized',
  description: post.data.description
}));

// Get current path for highlighting active link
const currentPath = Astro.url.pathname;
const isHome = currentPath === '/';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-DTND00MKLK"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-DTND00MKLK');
    </script>
  </head>
  <body class="min-h-screen bg-white dark:bg-slate-800 overflow-x-hidden">
    <div class="relative flex min-h-screen">
            <!-- Top header with subtle logo -->
      <div class="absolute top-0 left-0 z-40 p-4">
        <a href="/" class="text-sm text-slate-500 dark:text-slate-400 font-outfit hover:text-red-400 transition-colors">
          <span class="text-slate-400 dark:text-slate-500"><s>Not So</s></span> <span class="text-red-400">Common Thoughts</span>
        </a>
      </div>

      <!-- Fixed hamburger menu button -->
      <button
        id="mobile-menu-button"
        class="fixed top-4 right-4 z-50 p-2 rounded-md text-white hover:text-red-400 focus:outline-none bg-slate-900/80 backdrop-blur-sm"
        aria-label="Toggle menu"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>

      <!-- Sidebar -->
      <aside id="sidebar" class="fixed top-0 right-0 w-64 h-screen p-8 pt-16 overflow-y-auto transform translate-x-full transition-transform duration-200 ease-in-out z-30 bg-slate-900">
        <!-- Logo -->
        <div class="mb-8">
          <h1 class="text-2xl font-sans leading-none">
            <a href="/" class="hover:text-red-400 transition-colors font-outfit embossed">
              <span class="text-slate-300 font-normal"><s>Not So</s></span><br><span class="text-red-400 font-bold uppercase">COMMON<br>THOUGHTS</span>
            </a>
          </h1>
          <p class="text-xs text-slate-400 mt-2">
            by <a href="https://kohlhofer.com" target="_blank" rel="noopener noreferrer" class="text-red-400 hover:text-red-300 transition-colors">kohlhofer</a>
          </p>
        </div>
        <!-- Search Input -->
        <div class="mb-4">
          <div class="relative flex items-center">
            <input
              type="text"
              id="search-input"
              placeholder="Search posts..."
              class="w-full bg-transparent text-white placeholder-slate-400 border-b-2 border-slate-700 focus:border-red-400 pl-6 pr-0 py-1.5 text-sm focus:outline-none transition-colors"
            />
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-slate-400 absolute left-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
            <div id="search-results" class="absolute z-10 w-full top-full mt-1 bg-slate-800 rounded-md shadow-lg hidden">
              <div class="py-2 max-h-96 overflow-y-auto">
                <!-- Results will be populated here -->
              </div>
            </div>
          </div>
        </div>

        <nav>
          <ul>
            {formattedCategories.map(category => (
              <li>
                <a
                  href={`/${category.slug}`}
                  class:list={[
                    'block text-sm flex justify-between items-center py-2',
                    currentPath === `/${category.slug}`
                      ? 'text-red-400'
                      : 'text-slate-300 hover:text-red-400'
                  ]}
                >
                  <span>{category.name}</span>
                  <span class="text-xs text-slate-400">{category.count}</span>
                </a>
              </li>
            ))}
          </ul>
        </nav>

        <!-- Theme Toggle -->
        <div class="mt-12 flex items-center gap-4">
          <button
            id="theme-toggle"
            class="flex items-center gap-1.5 text-xs text-slate-300 hover:text-red-400 transition-colors"
            aria-label="Toggle dark mode"
          >
            <svg id="moon-icon" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
            </svg>
            <svg id="sun-icon" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 hidden" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
            </svg>
            <span class="theme-text">Theme</span>
          </button>
          <button
            id="random-post-button"
            class="text-xs text-slate-300 hover:text-red-400 transition-colors flex items-center gap-1.5"
            aria-label="Go to a random post"
            title="Show random post"
            type="button"
          >
            <span id="dice-icon"></span>
            <span>Random</span>
          </button>
        </div>
      </aside>

      <!-- Main Content and Footer Container -->
      <div class="flex-1 flex flex-col min-h-screen w-full">
        <!-- Main Content -->
        <main class="flex-1">
          <div class="min-h-[80vh] w-full mx-auto px-4 sm:px-8 pt-16 sm:pt-20">
            <slot />
          </div>
        </main>

        <!-- Footer -->
        <footer class="w-full px-4 py-8 bg-slate-900">
            <div class="flex flex-col sm:flex-row justify-between items-center gap-4 sm:gap-0">
              <p class="text-xs text-slate-400 font-serif text-center sm:text-left">
                Â© {new Date().getFullYear()} {title} by <a href="https://kohlhofer.com/about" class="text-red-400 hover:text-red-300 transition-colors">A. Kohlhofer</a>. All rights reserved.
              </p>
              <div class="flex gap-2">
                <a href="/rss.xml" class="text-xs bg-red-500 hover:bg-red-600 text-white px-2 py-0.5 rounded-sm transition-colors">RSS</a>
                <a href="/llms.txt" class="text-xs bg-blue-500 hover:bg-blue-600 text-white px-2 py-0.5 rounded-sm transition-colors">LLMs</a>
              </div>
            </div>
        </footer>
      </div>
    </div>

    <script define:vars={{ searchablePosts }}>
      // Mobile menu functionality
      const mobileMenuButton = document.getElementById('mobile-menu-button');
      const sidebar = document.getElementById('sidebar');
      let isMenuOpen = false;

      function toggleMenu() {
        isMenuOpen = !isMenuOpen;
        sidebar.style.transform = isMenuOpen ? 'translateX(0)' : 'translateX(100%)';
      }

      function handleResize() {
        // On all devices, ensure sidebar is hidden unless menu is open
        sidebar.style.transform = isMenuOpen ? 'translateX(0)' : 'translateX(100%)';
      }

      mobileMenuButton.addEventListener('click', toggleMenu);

      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (isMenuOpen && !sidebar.contains(e.target) && !mobileMenuButton.contains(e.target)) {
          toggleMenu();
        }
      });

      // Close menu when clicking a link
      const sidebarLinks = sidebar.querySelectorAll('a');
      sidebarLinks.forEach(link => {
        link.addEventListener('click', () => {
          if (isMenuOpen) {
            toggleMenu();
          }
        });
      });

      // Handle window resize
      window.addEventListener('resize', handleResize);
      // Initial check
      handleResize();

      // Theme toggle functionality
      const themeToggle = document.getElementById('theme-toggle');
      const themeText = document.querySelector('.theme-text');
      const moonIcon = document.getElementById('moon-icon');
      const sunIcon = document.getElementById('sun-icon');
      const html = document.documentElement;
      
      // Check for saved theme preference or use system preference
      const savedTheme = localStorage.getItem('theme');
      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
        html.classList.add('dark');
        themeText.textContent = 'Light mode';
        moonIcon.classList.add('hidden');
        sunIcon.classList.remove('hidden');
      } else {
        html.classList.remove('dark');
        themeText.textContent = 'Dark mode';
        moonIcon.classList.remove('hidden');
        sunIcon.classList.add('hidden');
      }

      // Toggle theme
      themeToggle.addEventListener('click', () => {
        if (html.classList.contains('dark')) {
          html.classList.remove('dark');
          localStorage.setItem('theme', 'light');
          themeText.textContent = 'Dark mode';
          moonIcon.classList.remove('hidden');
          sunIcon.classList.add('hidden');
        } else {
          html.classList.add('dark');
          localStorage.setItem('theme', 'dark');
          themeText.textContent = 'Light mode';
          moonIcon.classList.add('hidden');
          sunIcon.classList.remove('hidden');
        }
      });

      // Search functionality
      const searchInput = document.getElementById('search-input');
      const searchResults = document.getElementById('search-results');
      const resultsContainer = searchResults.querySelector('div');
      
      function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }

      function performSearch(query) {
        if (!query.trim()) {
          searchResults.classList.add('hidden');
          return;
        }

        const searchTerm = query.toLowerCase();
        const results = searchablePosts.filter(post => 
          post.title.toLowerCase().includes(searchTerm) ||
          post.description?.toLowerCase().includes(searchTerm)
        );

        if (results.length > 0) {
          resultsContainer.innerHTML = results.map(post => `
            <a href="/blog/${post.slug}" class="block px-4 py-2 text-sm text-slate-300 hover:bg-slate-700 hover:text-red-400">
              <div class="font-medium">${post.title}</div>
              <div class="text-xs text-slate-400">${post.category}</div>
            </a>
          `).join('');
          searchResults.classList.remove('hidden');
        } else {
          resultsContainer.innerHTML = `
            <div class="px-4 py-2 text-sm text-slate-400">
              No results found
            </div>
          `;
          searchResults.classList.remove('hidden');
        }
      }

      const debouncedSearch = debounce(performSearch, 300);

      searchInput.addEventListener('input', (e) => {
        debouncedSearch(e.target.value);
      });

      // Close search results when clicking outside
      document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
          searchResults.classList.add('hidden');
          searchInput.value = '';
        }
      });

      // Close search results when pressing Escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          searchResults.classList.add('hidden');
          searchInput.value = '';
          searchInput.blur();
        }
      });

      // Clear search when input loses focus
      searchInput.addEventListener('blur', () => {
        setTimeout(() => {
          searchInput.value = '';
          searchResults.classList.add('hidden');
        }, 200); // Small delay to allow clicking on results
      });

      // Dice icon animation
      const diceIcons = [
        `<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' fill='currentColor' viewBox='0 0 256 256'><rect width='256' height='256' fill='none'/><rect x='40' y='40' width='176' height='176' rx='24' stroke-width='16' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' fill='none'/><circle cx='128' cy='128' r='12' fill='currentColor'/></svg>`,
        `<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' fill='currentColor' viewBox='0 0 256 256'><rect width='256' height='256' fill='none'/><rect x='40' y='40' width='176' height='176' rx='24' stroke-width='16' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' fill='none'/><circle cx='96' cy='96' r='12' fill='currentColor'/><circle cx='160' cy='160' r='12' fill='currentColor'/></svg>`,
        `<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' fill='currentColor' viewBox='0 0 256 256'><rect width='256' height='256' fill='none'/><rect x='40' y='40' width='176' height='176' rx='24' stroke-width='16' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' fill='none'/><circle cx='96' cy='96' r='12' fill='currentColor'/><circle cx='128' cy='128' r='12' fill='currentColor'/><circle cx='160' cy='160' r='12' fill='currentColor'/></svg>`,
        `<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' fill='currentColor' viewBox='0 0 256 256'><rect width='256' height='256' fill='none'/><rect x='40' y='40' width='176' height='176' rx='24' stroke-width='16' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' fill='none'/><circle cx='96' cy='96' r='12' fill='currentColor'/><circle cx='160' cy='96' r='12' fill='currentColor'/><circle cx='96' cy='160' r='12' fill='currentColor'/><circle cx='160' cy='160' r='12' fill='currentColor'/></svg>`,
        `<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' fill='currentColor' viewBox='0 0 256 256'><rect width='256' height='256' fill='none'/><rect x='40' y='40' width='176' height='176' rx='24' stroke-width='16' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' fill='none'/><circle cx='96' cy='96' r='12' fill='currentColor'/><circle cx='160' cy='96' r='12' fill='currentColor'/><circle cx='128' cy='128' r='12' fill='currentColor'/><circle cx='96' cy='160' r='12' fill='currentColor'/><circle cx='160' cy='160' r='12' fill='currentColor'/></svg>`,
        `<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' fill='currentColor' viewBox='0 0 256 256'><rect width='256' height='256' fill='none'/><rect x='40' y='40' width='176' height='176' rx='24' stroke-width='16' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' fill='none'/><circle cx='96' cy='96' r='12' fill='currentColor'/><circle cx='160' cy='96' r='12' fill='currentColor'/><circle cx='96' cy='160' r='12' fill='currentColor'/><circle cx='160' cy='160' r='12' fill='currentColor'/><circle cx='96' cy='128' r='12' fill='currentColor'/><circle cx='160' cy='128' r='12' fill='currentColor'/></svg>`
      ];
      const diceIconSpan = document.getElementById('dice-icon');
      function setRandomDice() {
        const idx = Math.floor(Math.random() * diceIcons.length);
        diceIconSpan.innerHTML = diceIcons[idx];
      }
      setRandomDice();
      const randomPostButton = document.getElementById('random-post-button');
      randomPostButton.addEventListener('click', () => {
        const randomIndex = Math.floor(Math.random() * searchablePosts.length);
        const randomPost = searchablePosts[randomIndex];
        window.location.href = `/blog/${randomPost.slug}`;
      });
    </script>
  </body>
</html> 