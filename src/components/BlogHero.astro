---
import type { CollectionEntry } from 'astro:content';

interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { title, description, date } = post.data;

// Helper to format relative time
function getRelativeTime(date) {
  const now = new Date();
  const diff = Math.floor((now - date) / 1000);
  if (diff < 60) return `${diff} second${diff === 1 ? '' : 's'} ago`;
  if (diff < 3600) return `${Math.floor(diff / 60)} minute${Math.floor(diff / 60) === 1 ? '' : 's'} ago`;
  if (diff < 86400) return `${Math.floor(diff / 3600)} hour${Math.floor(diff / 3600) === 1 ? '' : 's'} ago`;
  if (diff < 2592000) return `${Math.floor(diff / 86400)} day${Math.floor(diff / 86400) === 1 ? '' : 's'} ago`;
  if (diff < 31536000) return `${Math.floor(diff / 2592000)} month${Math.floor(diff / 2592000) === 1 ? '' : 's'} ago`;
  return `${Math.floor(diff / 31536000)} year${Math.floor(diff / 31536000) === 1 ? '' : 's'} ago`;
}

// Get the main category from tags
const category = post.data.tags?.[0] || 'uncategorized';
const categoryName = category
  .split('-')
  .map(word => word.charAt(0).toUpperCase() + word.slice(1))
  .join(' ');
---

<section class="py-20 sm:py-24 pb-16 sm:pb-20 mb-4">
  <div class="max-w-4xl mx-auto px-4 sm:px-8">
    <div class="text-center">
      <!-- Category Badge -->
      <div class="mb-8 flex flex-wrap justify-center gap-3">
        {(post.data.tags || []).map((tag) => {
          const tagName = tag
            .split('-')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
          return (
            <a 
              href={`/${tag}`} 
              class="inline-block px-4 py-2 text-sm font-medium text-red-600 dark:text-red-400 bg-red-50 dark:bg-slate-800 border border-red-200 dark:border-slate-600 rounded-full hover:bg-red-100 dark:hover:bg-slate-700 transition-colors"
            >
              {tagName}
            </a>
          );
        })}
      </div>

      <!-- Title -->
      <h1 class="text-4xl sm:text-5xl lg:text-6xl font-serif text-slate-900 dark:text-slate-100 mb-8 leading-tight tracking-tight">
        {title}
      </h1>

      <!-- Description -->
      {description && (
        <p class="text-xl sm:text-2xl text-slate-600 dark:text-slate-400 mb-12 max-w-3xl mx-auto leading-relaxed font-serif">
          {description}
        </p>
      )}

      <!-- Meta Information -->
      <div class="flex flex-row items-center justify-center gap-6 text-sm text-slate-500 dark:text-slate-400">
        <time datetime={date.toISOString()} class="flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          {getRelativeTime(date)}
        </time>
        
        <span class="text-slate-300 dark:text-slate-600">â€¢</span>
        
        <div class="flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          {Math.max(1, Math.round(post.body.split(' ').length / 200))} min read
        </div>
      </div>
    </div>
  </div>
  
  <!-- Magazine-style separator -->
  <div class="flex justify-center mt-16">
    <div class="w-48 h-px bg-slate-300 dark:bg-slate-600"></div>
  </div>
</section> 