---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import PostListItem from '../components/PostListItem.astro';

// Get all blog posts
const posts = (await getCollection('blog')).filter(post => !post.data.unlisted);

// Get all unique categories from tags, and sort categories by the date of their most recent post (oldest first)
const categoryMap = new Map();
for (const post of posts) {
  (post.data.tags || []).forEach(tag => {
    if (!categoryMap.has(tag)) categoryMap.set(tag, []);
    categoryMap.get(tag).push(post);
  });
}

const sortedCategories = Array.from(categoryMap.entries())
  .sort((a, b) => {
    // Sort by the most recent post in each category (newest first)
    const aLatest = Math.max(...a[1].map(p => p.data.date.valueOf()));
    const bLatest = Math.max(...b[1].map(p => p.data.date.valueOf()));
    return bLatest - aLatest;
  });

// Greedy balancing: assign each category to the column with fewer posts so far
const leftCategories = [];
const rightCategories = [];
let leftCount = 0;
let rightCount = 0;
const shownSlugs = new Set(); // Reset here for correct balancing
const categorySections = [];

// First, sort all categories by their most recent post
for (const [category, posts] of sortedCategories) {
  // Sort posts by date (newest first)
  const sortedPosts = posts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  
  // Take up to 3 posts that haven't been shown yet
  const uniquePosts = [];
  for (const post of sortedPosts) {
    if (uniquePosts.length >= 3) break;
    if (!shownSlugs.has(post.slug)) {
      shownSlugs.add(post.slug);
      uniquePosts.push(post);
    }
  }

  if (uniquePosts.length > 0) {
    categorySections.push([category, uniquePosts]);
  }
}

// Then distribute categories between columns
for (const section of categorySections) {
  if (leftCount <= rightCount) {
    leftCategories.push(section);
    leftCount += section[1].length;
  } else {
    rightCategories.push(section);
    rightCount += section[1].length;
  }
}

// Sort all posts by date for chronological view
const chronologicalPosts = posts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
---

<Layout title="Not So Common Thoughts">
  <div class="pt-8 sm:pt-12 pb-16 sm:pb-24">
    <div class="max-w-7xl px-4 sm:px-8 md:px-12 lg:px-16">
      <!-- Hero Section -->
      <div class="text-center mb-16">
        <h1 class="text-3xl sm:text-4xl font-serif text-slate-900 dark:text-slate-100 mb-6">
          Not So Common Thoughts
        </h1>
        <blockquote class="text-lg sm:text-xl text-slate-600 dark:text-slate-400 font-serif italic max-w-3xl mx-auto">
          "The question then is, 'Of all the things you can now do, which do you choose to do?'"
        </blockquote>
        <p class="text-sm text-slate-500 dark:text-slate-500 mt-4">
          â€” Brian Eno
        </p>
      </div>

      <!-- Tab Navigation -->
      <div class="flex justify-center space-x-4 mb-16">
        <button
          class="tab-button active px-4 py-2 text-sm font-medium text-slate-900 dark:text-slate-100 border-b-2 border-red-600 dark:border-red-400"
          data-tab="categories"
        >
          Topic Overview
        </button>
        <button
          class="tab-button px-4 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 border-b-2 border-transparent hover:text-slate-900 dark:hover:text-slate-100"
          data-tab="chronological"
        >
          Latest Posts
        </button>
      </div>

      <!-- Categories View -->
      <div id="categories-view" class="tab-content">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-y-12 md:gap-y-0 md:gap-x-12">
          {/* Left column */}
          <div>
            {leftCategories.map(([category, uniquePosts], index) => {
              if (uniquePosts.length === 0) return null;
              return (
                <section class={index === leftCategories.length - 1 ? "" : "mb-12 sm:mb-16"} id={category}>
                  <div class="mb-6 pb-2 border-b border-slate-200 dark:border-slate-700">
                    <h2 class="text-lg font-serif text-slate-900 dark:text-slate-100">{category.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}</h2>
                  </div>
                  <div class="space-y-6 sm:space-y-8">
                    {uniquePosts.map(post => (
                      <PostListItem post={post} />
                    ))}
                  </div>
                  <div class="mt-6">
                    <a href={`/${category}`} class="text-sm font-normal text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors flex items-center gap-1">
                      {categoryMap.get(category).length - uniquePosts.length} more posts in {category.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                      </svg>
                    </a>
                  </div>
                </section>
              );
            })}
          </div>
          {/* Right column */}
          <div>
            {rightCategories.map(([category, uniquePosts], index) => {
              if (uniquePosts.length === 0) return null;
              return (
                <section class={index === rightCategories.length - 1 ? "" : "mb-12 sm:mb-16"} id={category}>
                  <div class="mb-6 pb-2 border-b border-slate-200 dark:border-slate-700">
                    <h2 class="text-lg font-serif text-slate-900 dark:text-slate-100">{category.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}</h2>
                  </div>
                  <div class="space-y-6 sm:space-y-8">
                    {uniquePosts.map(post => (
                      <PostListItem post={post} />
                    ))}
                  </div>
                  <div class="mt-6">
                    <a href={`/${category}`} class="text-sm font-normal text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors flex items-center gap-1">
                      {categoryMap.get(category).length - uniquePosts.length} more posts in {category.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                      </svg>
                    </a>
                  </div>
                </section>
              );
            })}
          </div>
        </div>
      </div>

      <!-- Chronological View -->
      <div id="chronological-view" class="tab-content hidden">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-y-0 md:gap-x-12">
          {chronologicalPosts.map((post, index) => (
            <div class="mb-12 sm:mb-16">
              <PostListItem post={post} />
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .bg-grid-white {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='32' height='32' fill='none' stroke='rgb(255 255 255 / 0.04)'%3e%3cpath d='M0 .5H31.5V32'/%3e%3c/svg%3e");
  }
</style>

<script>
  // Tab switching functionality
  const tabButtons = document.querySelectorAll('.tab-button');
  const tabContents = document.querySelectorAll('.tab-content');

  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Remove active class from all buttons
      tabButtons.forEach(btn => {
        btn.classList.remove('active', 'border-red-600', 'dark:border-red-400', 'text-slate-900', 'dark:text-slate-100');
        btn.classList.add('text-slate-600', 'dark:text-slate-400', 'border-transparent');
      });

      // Add active class to clicked button
      button.classList.add('active', 'border-red-600', 'dark:border-red-400', 'text-slate-900', 'dark:text-slate-100');
      button.classList.remove('text-slate-600', 'dark:text-slate-400', 'border-transparent');

      // Hide all tab contents
      tabContents.forEach(content => {
        content.classList.add('hidden');
      });

      // Show selected tab content
      const tabId = button.getAttribute('data-tab');
      document.getElementById(`${tabId}-view`).classList.remove('hidden');
    });
  });
</script>
