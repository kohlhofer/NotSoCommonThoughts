---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import PostListItem from '../components/PostListItem.astro';

// Get all blog posts
const posts = await getCollection('blog');

// Get all unique categories from tags, and sort categories by the date of their most recent post (oldest first)
const categoryMap = new Map();
for (const post of posts) {
  (post.data.tags || []).forEach(tag => {
    if (!categoryMap.has(tag)) categoryMap.set(tag, []);
    categoryMap.get(tag).push(post);
  });
}

const sortedCategories = Array.from(categoryMap.entries())
  .sort((a, b) => {
    // Sort by the most recent post in each category (oldest first)
    const aLatest = Math.max(...a[1].map(p => p.data.date.valueOf()));
    const bLatest = Math.max(...b[1].map(p => p.data.date.valueOf()));
    return aLatest - bLatest;
  });

// Alternate categories between two columns
const leftCategories = [];
const rightCategories = [];
sortedCategories.forEach((cat, i) => {
  (i % 2 === 0 ? leftCategories : rightCategories).push(cat);
});

// Track which posts have already been shown
const shownSlugs = new Set();
---

<Layout title="Not So Common Thoughts">
  <div class="pt-8 sm:pt-16">
    <div class="max-w-7xl px-4 sm:px-8 md:px-12 lg:px-16">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-y-0 lg:gap-x-12">
        {/* Left column */}
        <div>
          {leftCategories.map(([category, posts]) => {
            // Only show posts that haven't already been shown
            const uniquePosts = posts
              .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
              .filter(post => {
                if (shownSlugs.has(post.slug)) return false;
                shownSlugs.add(post.slug);
                return true;
              })
              .slice(0, 5);
            if (uniquePosts.length === 0) return null;
            return (
              <section class="mb-12 sm:mb-16" id={category}>
                <div class="mb-6 pb-2 border-b border-slate-200 dark:border-slate-800">
                  <h2 class="text-lg font-serif text-slate-900 dark:text-slate-100">{category.charAt(0).toUpperCase() + category.slice(1)}</h2>
                </div>
                <div class="space-y-6 sm:space-y-8">
                  {uniquePosts.map(post => (
                    <PostListItem post={post} />
                  ))}
                </div>
                <div class="mt-6">
                  <a href={`/${category}`} class="text-sm font-normal text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors flex items-center gap-1">
                    See all {category} posts
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                  </a>
                </div>
              </section>
            );
          })}
        </div>
        {/* Right column */}
        <div>
          {rightCategories.map(([category, posts]) => {
            // Only show posts that haven't already been shown
            const uniquePosts = posts
              .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
              .filter(post => {
                if (shownSlugs.has(post.slug)) return false;
                shownSlugs.add(post.slug);
                return true;
              })
              .slice(0, 5);
            if (uniquePosts.length === 0) return null;
            return (
              <section class="mb-12 sm:mb-16" id={category}>
                <div class="mb-6 pb-2 border-b border-slate-200 dark:border-slate-800">
                  <h2 class="text-lg font-serif text-slate-900 dark:text-slate-100">{category.charAt(0).toUpperCase() + category.slice(1)}</h2>
                </div>
                <div class="space-y-6 sm:space-y-8">
                  {uniquePosts.map(post => (
                    <PostListItem post={post} />
                  ))}
                </div>
                <div class="mt-6">
                  <a href={`/${category}`} class="text-sm font-normal text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors flex items-center gap-1">
                    See all {category} posts
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                  </a>
                </div>
              </section>
            );
          })}
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .bg-grid-white {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='32' height='32' fill='none' stroke='rgb(255 255 255 / 0.04)'%3e%3cpath d='M0 .5H31.5V32'/%3e%3c/svg%3e");
  }
</style>
